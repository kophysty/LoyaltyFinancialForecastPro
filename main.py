import streamlit as st
import plotly.graph_objects as go
from models.financial_model import FinancialModel
from utils.config import initialize_session_state
from utils.presets import load_preset
from utils.logging_config import log_error, log_warning, log_info, log_debug

# Configure the application
try:
    log_info("Starting Loyalty Program Financial Modeling application")
    st.set_page_config(
    page_title="Loyalty Program Financial Modeling",
    page_icon="üìä",
    layout="wide"
)

def format_currency(value):
    return f"‚ÇΩ{value:,.0f}"

def format_number(value):
    return f"{value:,.0f}"

def main():
    try:
        log_info("Initializing main application")
        initialize_session_state()
        
        st.title("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
    
    # Header with month selector
    col1, col2 = st.columns([3, 1])
    with col2:
        selected_month = st.selectbox(
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞",
            options=range(1, 25),
            format_func=lambda x: f"{x} –º–µ—Å—è—Ü"
        )
    
    # Calculate financial data
    model = FinancialModel()
    results = model.calculate_financials()
    current_month = results[selected_month - 1]
    total_profit = sum(month['profit'] for month in results)
    
    # Main metrics cards
    st.markdown("### –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    metrics_col1, metrics_col2, metrics_col3, metrics_col4 = st.columns(4)
    
    with metrics_col1:
        st.markdown("#### –ú–µ—Å—è—á–Ω–∞—è –≤—ã—Ä—É—á–∫–∞")
        st.markdown(f"### {format_currency(current_month['revenue'])}")
        total_revenue = sum(month['revenue'] for month in results)
        st.markdown(f"–ó–∞ 2 –≥–æ–¥–∞: {format_currency(total_revenue)}")
    
    with metrics_col2:
        st.markdown("#### –ú–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
        total_month_expenses = current_month['expenses'] + current_month['taxes']
        st.markdown(f"### {format_currency(total_month_expenses)}")
        st.markdown(f"""
        –§–û–¢: {format_currency(current_month['fot'])}  
        –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {format_currency(current_month['marketing'])}  
        –ù–∞–ª–æ–≥–∏: {format_currency(current_month['taxes'])}
        """)
    
    with metrics_col3:
        st.markdown("#### –ú–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å")
        st.markdown(f"### {format_currency(current_month['profit'])}")
        st.markdown(f"–ó–∞ 2 –≥–æ–¥–∞: {format_currency(total_profit)}")
    
    with metrics_col4:
        st.markdown("#### –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        st.markdown(f"### {format_number(current_month['active_users'])}")
        st.markdown(f"""
        –ù–æ–≤—ã—Ö –≤ –º–µ—Å—è—Ü: +{format_number(current_month['total_new_users'])}  
        –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {format_number(current_month['active_users'] / 100)}
        """)
    
    # Charts
    st.markdown("### –ì—Ä–∞—Ñ–∏–∫–∏")
    
    # Revenue and Expenses
    fig_financials = go.Figure()
    fig_financials.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['revenue'] for r in results],
        name='–í—ã—Ä—É—á–∫–∞',
        line=dict(color='#8884d8')
    ))
    fig_financials.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['marketing'] for r in results],
        name='–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
        line=dict(color='#82ca9d')
    ))
    fig_financials.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['fot'] for r in results],
        name='–§–û–¢',
        line=dict(color='#ff7300')
    ))
    fig_financials.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['taxes'] for r in results],
        name='–ù–∞–ª–æ–≥–∏',
        line=dict(color='#d88884')
    ))
    fig_financials.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['profit'] for r in results],
        name='–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å',
        line=dict(color='#ffc658')
    ))
    
    fig_financials.update_layout(
        title='–í—ã—Ä—É—á–∫–∞, —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–∏–±—ã–ª—å',
        xaxis_title='–ú–µ—Å—è—Ü',
        yaxis_title='–°—É–º–º–∞ (‚ÇΩ)',
        height=500
    )
    st.plotly_chart(fig_financials, use_container_width=True)
    
    # Revenue Structure
    fig_revenue = go.Figure()
    
    # Calculate cumulative sums for stacking
    y_commission = [r['commission_revenue'] for r in results]
    y_subscription = [r['subscription_revenue'] for r in results]
    y_premium = [r['premium_revenue'] for r in results]
    y_additional = [r['additional_revenue'] for r in results]
    
    x_months = [r['month'] for r in results]
    
    # Add traces in reverse order for proper stacking
    fig_revenue.add_trace(go.Scatter(
        x=x_months,
        y=[sum(x) for x in zip(y_commission, y_subscription, y_premium, y_additional)],
        fill='tonexty',
        name='–î–æ–ø. –¥–æ—Ö–æ–¥—ã',
        line=dict(color='#ff7300')
    ))
    
    fig_revenue.add_trace(go.Scatter(
        x=x_months,
        y=[sum(x) for x in zip(y_commission, y_subscription, y_premium)],
        fill='tonexty',
        name='–ü—Ä–µ–º–∏—É–º',
        line=dict(color='#ffc658')
    ))
    
    fig_revenue.add_trace(go.Scatter(
        x=x_months,
        y=[sum(x) for x in zip(y_commission, y_subscription)],
        fill='tonexty',
        name='–ü–æ–¥–ø–∏—Å–∫–∏',
        line=dict(color='#82ca9d')
    ))
    
    fig_revenue.add_trace(go.Scatter(
        x=x_months,
        y=y_commission,
        fill='tonexty',
        name='–ö–æ–º–∏—Å—Å–∏–∏',
        line=dict(color='#8884d8')
    ))
    
    fig_revenue.update_layout(
        title='–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã—Ä—É—á–∫–∏',
        xaxis_title='–ú–µ—Å—è—Ü',
        yaxis_title='–°—É–º–º–∞ (‚ÇΩ)',
        height=500
    )
    st.plotly_chart(fig_revenue, use_container_width=True)
    
    # User Growth
    fig_users = go.Figure()
    fig_users.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['active_users'] for r in results],
        name='–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
        line=dict(color='#8884d8')
    ))
    fig_users.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['new_users'] for r in results],
        name='–ù–æ–≤—ã–µ –æ—Ç –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞',
        line=dict(color='#82ca9d')
    ))
    fig_users.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['base_growth'] for r in results],
        name='–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ä–æ—Å—Ç',
        line=dict(color='#ffc658')
    ))
    
    fig_users.update_layout(
        title='–†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
        xaxis_title='–ú–µ—Å—è—Ü',
        yaxis_title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        height=500
    )
    st.plotly_chart(fig_users, use_container_width=True)
    
    # Turnover
    fig_turnover = go.Figure()
    fig_turnover.add_trace(go.Scatter(
        x=[r['month'] for r in results],
        y=[r['turnover'] for r in results],
        name='–û–±–æ—Ä–æ—Ç',
        line=dict(color='#8884d8')
    ))
    
    fig_turnover.update_layout(
        title='–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç',
        xaxis_title='–ú–µ—Å—è—Ü',
    except Exception as e:
        log_error(e, context="Error in main application")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {str(e)}")

        yaxis_title='–°—É–º–º–∞ (‚ÇΩ)',
        height=500
    )
    st.plotly_chart(fig_turnover, use_container_width=True)

if __name__ == "__main__":
    main()
