import streamlit as st
import json
from utils.presets import save_preset, delete_custom_preset, is_custom_preset, PRESETS
from utils.translations import get_translation

def parameter_management_page():
    lang = st.session_state.get('language', 'ru')
    t = lambda key: get_translation(key, lang)
    
    st.title(t('parameter_management'))
    
    st.header(t('preset_scenarios'))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    try:
        with open('custom_presets.json', 'r') as f:
            custom_presets = json.load(f)
    except FileNotFoundError:
        custom_presets = {}
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenario_names = {
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
        "pessimistic": "–ü–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–Ω—ã–π",
        "optimistic": "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π",
        **{name: f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π: {name}" for name in custom_presets.keys()}
    }
    
    col_select, col_delete = st.columns([3, 1])
        
    with col_select:
        selected_preset = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            options=list(scenario_names.keys()),
            format_func=lambda x: scenario_names[x],
            index=list(scenario_names.keys()).index("standard")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        )
    
    with col_delete:
        if is_custom_preset(selected_preset):
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π", type="secondary", help="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π"):
                if delete_custom_preset(selected_preset):
                    st.success(f"–°—Ü–µ–Ω–∞—Ä–∏–π '{selected_preset}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                    st.session_state['current_scenario'] = 'standard'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
    
    if selected_preset:
        st.subheader(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_names[selected_preset]}")
        preset_data = PRESETS[selected_preset]
        
        for key, value in preset_data.items():
            st.session_state[key] = value
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—ç—à–±—ç–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
            st.session_state['cashback_rate'] = st.slider(
                "–ü—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞",
                min_value=0.0,
                max_value=50.0,
                value=float(preset_data.get('cashback_rate', 0.15) * 100),
                format="%.1f%%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –∫—ç—à–±—ç–∫–∞ –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏",
                key=f"cashback_{selected_preset}"
            ) / 100
            
            st.session_state['points_usage_rate'] = st.slider(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤",
                min_value=0.0,
                max_value=100.0,
                value=float(preset_data.get('points_usage_rate', 0.70) * 100),
                format="%.1f%%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤",
                key=f"points_usage_{selected_preset}"
            ) / 100
            
            st.session_state['initial_users'] = st.number_input(
                "–ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                min_value=500,
                max_value=5000,
                value=preset_data.get('initial_users', 1000),
                step=100,
                key=f"init_users_{selected_preset}"
            )
            
            st.session_state['active_conversion'] = st.number_input(
                "–ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö",
                min_value=0.0,
                max_value=100.0,
                value=preset_data.get('active_conversion', 0.1) * 100,
                format="%.2f",
                help="–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
            ) / 100
            
            st.session_state['growth_rate_y1'] = st.number_input(
                "–†–æ—Å—Ç 1–π –≥–æ–¥",
                min_value=0.0,
                max_value=100.0,
                value=preset_data.get('growth_rate_y1', 0.2) * 100,
                format="%.2f",
                help="–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
            ) / 100
            
            st.session_state['growth_rate_y2'] = st.number_input(
                "–†–æ—Å—Ç 2–π –≥–æ–¥",
                min_value=0.0,
                max_value=100.0,
                value=preset_data.get('growth_rate_y2', 0.15) * 100,
                format="%.2f",
                help="–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"
            ) / 100
            
            st.session_state['avg_check'] = st.number_input(
                "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ (‚ÇΩ)",
                min_value=1000,
                max_value=10000,
                value=preset_data.get('avg_check', 2000),
                step=500,
                key=f"avg_check_{selected_preset}"
            )

            st.markdown("**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞–º–∏:**")
            st.session_state['premium_business_start_month'] = st.number_input(
                "–ú–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ü—Ä–µ–º–∏—É–º –ë–∏–∑–Ω–µ—Å",
                min_value=1,
                max_value=24,
                value=preset_data.get('premium_business_start_month', 13),
                step=1,
                help="–í –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ –Ω–∞—á–Ω—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ü—Ä–µ–º–∏—É–º –ë–∏–∑–Ω–µ—Å"
            )
            
            st.session_state['premium_business_rate'] = st.slider(
                "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ç–∞—Ä–∏—Ñ–µ",
                min_value=0.0,
                max_value=100.0,
                value=float(preset_data.get('premium_business_rate', 0.3) * 100),
                format="%.1f%%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—é—Ç –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É",
                key=f"premium_business_rate_{selected_preset}"
            ) / 100
            
            st.session_state['premium_business_price'] = st.number_input(
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ü—Ä–µ–º–∏—É–º –ë–∏–∑–Ω–µ—Å (‚ÇΩ)",
                min_value=1000,
                max_value=20000,
                value=preset_data.get('premium_business_price', 8000),
                step=1000,
                help="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"
            )

            st.session_state['premium_user_start_month'] = st.number_input(
                "–ú–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ü—Ä–µ–º–∏—É–º –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                min_value=1,
                max_value=24,
                value=preset_data.get('premium_user_start_month', 13),
                step=1,
                help="–í –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ –Ω–∞—á–Ω—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            
            st.session_state['premium_user_price'] = st.number_input(
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (‚ÇΩ)",
                min_value=100,
                max_value=5000,
                value=preset_data.get('premium_user_price', 299),
                step=100,
                help="–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )

            st.session_state['ad_start_month'] = st.number_input(
                "–ú–µ—Å—è—Ü –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã",
                min_value=1,
                max_value=24,
                value=preset_data.get('ad_start_month', 13),
                step=1,
                help="–í –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ –Ω–∞—á–Ω—ë—Ç—Å—è –ø–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã"
            )
            
            st.session_state['ad_revenue_per_user'] = st.number_input(
                "–î–æ—Ö–æ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —Ä–µ–∫–ª–∞–º—ã (‚ÇΩ)",
                min_value=0,
                max_value=100,
                value=preset_data.get('ad_revenue_per_user', 20),
                step=5,
                help="–°–∫–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–∏–Ω–æ—Å–∏—Ç –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç —Ä–µ–∫–ª–∞–º—ã –≤ –º–µ—Å—è—Ü"
            )
            
        with col2:
            st.markdown("**–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
            st.session_state['initial_investment'] = st.number_input(
                "–ù–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (‚ÇΩ)",
                min_value=1000000,
                max_value=50000000,
                value=preset_data.get('initial_investment', 10000000),
                step=1000000,
                help="–û–±—ä–µ–º –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–∞ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞"
            )
            
            st.session_state['preparatory_expenses'] = st.number_input(
                "–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø (‚ÇΩ)",
                min_value=1000000,
                max_value=30000000,
                value=preset_data.get('preparatory_expenses', 21000000),
                step=1000000,
                help="–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º (~$300K)"
            )
            
            st.session_state['base_infra_cost'] = st.number_input(
                "–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (‚ÇΩ)",
                min_value=100000,
                max_value=1000000,
                value=preset_data.get('base_infra_cost', 300000),
                step=50000,
                key=f"infra_{selected_preset}"
            )
            
            st.session_state['marketing_spend_rate'] = st.slider(
                "–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (% –æ—Ç –¥–æ—Ö–æ–¥–∞)",
                min_value=0.0,
                max_value=25.0,
                value=float(preset_data.get('marketing_spend_rate', 0.05) * 100),
                step=0.5,
                format="%.1f%%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–æ—Ö–æ–¥–∞, –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º—ã–π –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
                key=f"marketing_rate_{selected_preset}"
            ) / 100
            
            st.session_state['claim_period_months'] = st.number_input(
                "–ü–µ—Ä–∏–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ (–º–µ—Å—è—Ü—ã)",
                min_value=1,
                max_value=12,
                value=preset_data.get('claim_period_months', 2),
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–∞–ª–ª—ã"
            )
            
            st.session_state['expired_points_rate'] = st.slider(
                "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–≥–æ—Ä–∞—é—â–∏—Ö –±–∞–ª–ª–æ–≤",
                min_value=0.0,
                max_value=100.0,
                value=float(preset_data.get('expired_points_rate', 0.07) * 100),
                format="%.1f%%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–≥–æ—Ä–∞—é—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                key=f"expired_points_{selected_preset}"
            ) / 100
            
            st.session_state['marketing_efficiency'] = st.number_input(
                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ (–ø–æ–ª—å–∑./100K)",
                min_value=10,
                max_value=500,
                value=preset_data.get('marketing_efficiency', 100),
                step=10,
                key=f"marketing_eff_{selected_preset}"
            )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        def get_current_values():
            return {
                'initial_users': st.session_state['initial_users'],
                'active_conversion': st.session_state['active_conversion'],
                'growth_rate_y1': st.session_state['growth_rate_y1'],
                'growth_rate_y2': st.session_state['growth_rate_y2'],
                'avg_check': st.session_state['avg_check'],
                'cashback_rate': st.session_state['cashback_rate'],
                'points_usage_rate': st.session_state['points_usage_rate'],
                'expired_points_rate': st.session_state['expired_points_rate'],
                'exchange_commission_rate': st.session_state.get('exchange_commission_rate', 0.03),
                'reward_commission_rate': st.session_state.get('reward_commission_rate', 0.05),
                'base_infra_cost': st.session_state['base_infra_cost'],
                'marketing_spend_rate': st.session_state['marketing_spend_rate'],
                'marketing_efficiency': st.session_state['marketing_efficiency'],
                'ad_revenue_per_user': st.session_state.get('ad_revenue_per_user', 20),
                'partnership_rate': st.session_state.get('partnership_rate', 0.005),
                'initial_investment': st.session_state['initial_investment'],
                'preparatory_expenses': st.session_state['preparatory_expenses'],
                'claim_period_months': st.session_state['claim_period_months'],
                'premium_business_start_month': st.session_state['premium_business_start_month'],
                'premium_business_rate': st.session_state['premium_business_rate'],
                'premium_business_price': st.session_state['premium_business_price'],
                'premium_user_start_month': st.session_state['premium_user_start_month'],
                'premium_user_price': st.session_state['premium_user_price'],
                'ad_start_month': st.session_state['ad_start_month'],
                'ad_revenue_per_user': st.session_state['ad_revenue_per_user'],
                'premium_user_price': st.session_state['premium_user_price']
            }

        st.divider()
        st.subheader("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è")
        
        col_save1, col_save2 = st.columns(2)
        
        with col_save1:
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π", key="save_current"):
                current_values = get_current_values()
                PRESETS[selected_preset] = current_values
                st.success(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_names[selected_preset]}")
        
        with col_save2:
            new_preset_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è", key="new_preset_name")
            save_new = st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π", key="save_new")
            if save_new:
                if new_preset_name:
                    current_values = get_current_values()
                    save_preset(new_preset_name, current_values)
                    st.success(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {new_preset_name}")
                else:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")

        st.divider()
        st.subheader("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if st.button("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", type="primary"):
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            PRESETS["standard"] = {
                "initial_users": 1000,
                "active_conversion": 0.30,
                "claim_period_months": 2,
                "growth_rate_y1": 0.25,  # –°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                "growth_rate_y2": 0.15,
                "avg_check": 2800,
                "points_usage_rate": 0.55,
                "cashback_rate": 0.12,
                "expired_points_rate": 0.07,
                "exchange_commission_rate": 0.03,
                "reward_commission_rate": 0.04,
                "base_infra_cost": 200000,
                "marketing_efficiency": 200,
                "marketing_spend_rate": 0.15,  # –°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                "ad_revenue_per_user": 20,
                "partnership_rate": 0.005,
                "burn_rate_fot_1": 2500000,
                "burn_rate_fot_2": 3500000,
                "premium_business_start_month": 8,  # –°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                "premium_user_start_month": 13,
                "ad_start_month": 8,  # –°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                "premium_business_rate": 0.30,
                "premium_business_price": 8000,
                "premium_user_price": 299,
                "premium_user_price": 299
            }
            
            PRESETS["pessimistic"] = {
                **PRESETS["standard"],
                "initial_users": 800,
                "active_conversion": 0.25,
                "growth_rate_y1": 0.20,
                "growth_rate_y2": 0.10,
                "avg_check": 2500,
                "points_usage_rate": 0.50,
                "exchange_commission_rate": 0.02,
                "reward_commission_rate": 0.03,
                "base_infra_cost": 250000,
                "marketing_efficiency": 150,
                "ad_revenue_per_user": 15,
                "partnership_rate": 0.003,
                "burn_rate_fot_1": 2500000,
                "burn_rate_fot_2": 3000000,
                "premium_business_rate": 0.20,
                "premium_user_price": 299
            }
            
            PRESETS["optimistic"] = {
                **PRESETS["standard"],
                "initial_users": 1200,
                "active_conversion": 0.35,
                "growth_rate_y1": 0.30,
                "growth_rate_y2": 0.20,
                "avg_check": 3200,
                "points_usage_rate": 0.60,
                "exchange_commission_rate": 0.04,
                "reward_commission_rate": 0.05,
                "base_infra_cost": 180000,
                "marketing_efficiency": 250,
                "ad_revenue_per_user": 25,
                "partnership_rate": 0.007,
                "burn_rate_fot_1": 2000000,
                "burn_rate_fot_2": 3000000,
                "premium_business_rate": 0.40,
                "premium_user_price": 299
            }
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            st.success("–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            st.rerun()

        

if __name__ == "__main__":
    parameter_management_page()